//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
 Copyright 2022 Galaxyobe.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by ___1option_gen. DO NOT EDIT.

package slice

import (
	builtins "github.com/galaxyobe/gen/cmd/option-gen/output_tests/builtins"
)

type AliasSliceOption func(*AliasSlice)

func WithI8SAliasSliceOption(val ...*int8) AliasSliceOption {
	return func(object *AliasSlice) {
		object.I8S = val
	}
}

func WithI8PSAliasSliceOption(val *[]int8) AliasSliceOption {
	return func(object *AliasSlice) {
		object.I8pS = val
	}
}

func WithU8SAliasSliceOption(val ...*uint8) AliasSliceOption {
	return func(object *AliasSlice) {
		object.U8S = val
	}
}

func WithU8PSAliasSliceOption(val *[]uint8) AliasSliceOption {
	return func(object *AliasSlice) {
		object.U8pS = val
	}
}

func WithSSAliasSliceOption(val ...*string) AliasSliceOption {
	return func(object *AliasSlice) {
		object.SS = val
	}
}

func WithSpSAliasSliceOption(val *[]string) AliasSliceOption {
	return func(object *AliasSlice) {
		object.SpS = val
	}
}

func WithBSAliasSliceOption(val ...*byte) AliasSliceOption {
	return func(object *AliasSlice) {
		object.BS = val
	}
}

func WithBpSAliasSliceOption(val *[]byte) AliasSliceOption {
	return func(object *AliasSlice) {
		object.BpS = val
	}
}

func WithBuiltinsSAliasSliceOption(val ...*builtins.Builtins) AliasSliceOption {
	return func(object *AliasSlice) {
		object.BuiltinsS = val
	}
}

func WithBuiltinsPsAliasSliceOption(val *[]builtins.Builtins) AliasSliceOption {
	return func(object *AliasSlice) {
		object.BuiltinsPs = val
	}
}

type BOption func(*B)

type SliceOption func(*Slice)

func WithI8SSliceOption(val ...int8) SliceOption {
	return func(object *Slice) {
		object.i8S = val
	}
}

func WithI8S2SliceOption(val ...*int8) SliceOption {
	return func(object *Slice) {
		object.I8S = val
	}
}

func WithI8PSSliceOption(val *[]int8) SliceOption {
	return func(object *Slice) {
		object.I8pS = val
	}
}

func WithU8SSliceOption(val ...uint8) SliceOption {
	return func(object *Slice) {
		object.u8S = val
	}
}

func WithU8S2SliceOption(val ...*uint8) SliceOption {
	return func(object *Slice) {
		object.U8S = val
	}
}

func WithU8PSSliceOption(val *[]uint8) SliceOption {
	return func(object *Slice) {
		object.U8pS = val
	}
}

func WithSSSliceOption(val ...string) SliceOption {
	return func(object *Slice) {
		object.sS = val
	}
}

func WithSS2SliceOption(val ...*string) SliceOption {
	return func(object *Slice) {
		object.SS = val
	}
}

func WithSpSSliceOption(val *[]string) SliceOption {
	return func(object *Slice) {
		object.SpS = val
	}
}

func WithBSSliceOption(val ...byte) SliceOption {
	return func(object *Slice) {
		object.bS = val
	}
}

func WithBS2SliceOption(val ...*byte) SliceOption {
	return func(object *Slice) {
		object.BS = val
	}
}

func WithBpSSliceOption(val *[]byte) SliceOption {
	return func(object *Slice) {
		object.BpS = val
	}
}

func WithBBSSliceOption(val ...B) SliceOption {
	return func(object *Slice) {
		object.BBS = val
	}
}

func WithBuiltinsSSliceOption(val ...builtins.Builtins) SliceOption {
	return func(object *Slice) {
		object.builtinsS = val
	}
}

func WithBuiltinsS2SliceOption(val ...*builtins.Builtins) SliceOption {
	return func(object *Slice) {
		object.BuiltinsS = val
	}
}

func WithBuiltinsPsSliceOption(val *[]builtins.Builtins) SliceOption {
	return func(object *Slice) {
		object.BuiltinsPs = val
	}
}
