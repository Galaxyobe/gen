//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
 Copyright 2022 Galaxyobe.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by ___1option_gen. DO NOT EDIT.

package structs

import (
	builtins "github.com/galaxyobe/gen/cmd/option-gen/output_tests/builtins"
)

type AliasOption func(*Alias)

func WithU8AliasOption(val builtins.Uint8) AliasOption {
	return func(object *Alias) {
		object.U8 = val
	}
}

func WithI8AliasOption(val builtins.Int8) AliasOption {
	return func(object *Alias) {
		object.I8 = val
	}
}

func WithUAliasOption(val builtins.Uint) AliasOption {
	return func(object *Alias) {
		object.U = val
	}
}

func WithIAliasOption(val builtins.Int) AliasOption {
	return func(object *Alias) {
		object.I = val
	}
}

func WithStrFuncAliasOption(val builtins.StrFunc) AliasOption {
	return func(object *Alias) {
		object.StrFunc = val
	}
}

func WithI8FuncAliasOption(val builtins.I8Func) AliasOption {
	return func(object *Alias) {
		object.I8Func = val
	}
}

func WithU8FuncAliasOption(val builtins.U8Func) AliasOption {
	return func(object *Alias) {
		object.U8Func = val
	}
}

func WithInt8AliasOption(val int8) AliasOption {
	return func(object *Alias) {
		object.Int8 = val
	}
}

func WithUint8AliasOption(val uint8) AliasOption {
	return func(object *Alias) {
		object.Uint8 = val
	}
}

func WithAAliasOption(val interface{}) AliasOption {
	return func(object *Alias) {
		object.A = val
	}
}

func WithBoolAliasOption(val bool) AliasOption {
	return func(object *Alias) {
		object.Bool = val
	}
}

func WithByteAliasOption(val byte) AliasOption {
	return func(object *Alias) {
		object.Byte = val
	}
}

func WithInt16AliasOption(val int16) AliasOption {
	return func(object *Alias) {
		object.Int16 = val
	}
}

func WithInt32AliasOption(val int32) AliasOption {
	return func(object *Alias) {
		object.Int32 = val
	}
}

func WithInt64AliasOption(val int64) AliasOption {
	return func(object *Alias) {
		object.Int64 = val
	}
}

func WithUint16AliasOption(val uint16) AliasOption {
	return func(object *Alias) {
		object.Uint16 = val
	}
}

func WithUint32AliasOption(val uint32) AliasOption {
	return func(object *Alias) {
		object.Uint32 = val
	}
}

func WithUint64AliasOption(val uint64) AliasOption {
	return func(object *Alias) {
		object.Uint64 = val
	}
}

func WithFloat32AliasOption(val float32) AliasOption {
	return func(object *Alias) {
		object.Float32 = val
	}
}

func WithFloat64AliasOption(val float64) AliasOption {
	return func(object *Alias) {
		object.Float64 = val
	}
}

func WithStringAliasOption(val string) AliasOption {
	return func(object *Alias) {
		object.String = val
	}
}

func WithBytesAliasOption(val ...byte) AliasOption {
	return func(object *Alias) {
		object.Bytes = val
	}
}

func WithBoolPAliasOption(val *bool) AliasOption {
	return func(object *Alias) {
		object.BoolP = val
	}
}

func WithBytePAliasOption(val *byte) AliasOption {
	return func(object *Alias) {
		object.ByteP = val
	}
}

func WithIntPAliasOption(val *int) AliasOption {
	return func(object *Alias) {
		object.IntP = val
	}
}

func WithUintPAliasOption(val *uint) AliasOption {
	return func(object *Alias) {
		object.UintP = val
	}
}

func WithBytesPAliasOption(val *[]byte) AliasOption {
	return func(object *Alias) {
		object.BytesP = val
	}
}

func WithFloat64PAliasOption(val *float64) AliasOption {
	return func(object *Alias) {
		object.Float64P = val
	}
}

func WithStringPAliasOption(val *string) AliasOption {
	return func(object *Alias) {
		object.StringP = val
	}
}

type StructsOption func(*Structs)

func WithBStructsOption(val byte) StructsOption {
	return func(object *Structs) {
		object.b = val
	}
}

func WithUStructsOption(val uint8) StructsOption {
	return func(object *Structs) {
		object.u = val
	}
}

func WithIStructsOption(val int8) StructsOption {
	return func(object *Structs) {
		object.i = val
	}
}

func WithStringStructsOption(val string) StructsOption {
	return func(object *Structs) {
		object.String = val
	}
}

func WithBuiltinsStructsOption(val builtins.Builtins) StructsOption {
	return func(object *Structs) {
		object.Builtins = val
	}
}

func WithBuiltins1StructsOption(val builtins.Builtins) StructsOption {
	return func(object *Structs) {
		object.Builtins1 = val
	}
}

func WithBuiltins2StructsOption(val *builtins.Builtins) StructsOption {
	return func(object *Structs) {
		object.Builtins2 = val
	}
}

func WithUserStructsOption(val User) StructsOption {
	return func(object *Structs) {
		object.User = val
	}
}

func WithUser2StructsOption(val User) StructsOption {
	return func(object *Structs) {
		object.User2 = val
	}
}

func WithUser3StructsOption(val *User) StructsOption {
	return func(object *Structs) {
		object.User3 = val
	}
}

func WithAgeStructsOption(val Age) StructsOption {
	return func(object *Structs) {
		object.Age = val
	}
}

type UserOption func(*User)

func WithNameUserOption(val string) UserOption {
	return func(object *User) {
		object.Name = val
	}
}

func WithAgeUserOption(val Age) UserOption {
	return func(object *User) {
		object.Age = val
	}
}

type UserInfoOption func(*UserInfo)

func WithNameUserInfoOption(val string) UserInfoOption {
	return func(object *UserInfo) {
		object.Name = val
	}
}

func WithAgeUserInfoOption(val Age) UserInfoOption {
	return func(object *UserInfo) {
		object.Age = val
	}
}
